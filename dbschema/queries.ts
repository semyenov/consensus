// GENERATED by @edgedb/generate v0.5.4

import type {Executor} from "edgedb";

export type GetBlogpostArgs = {
  readonly "blogpost_id": string;
};

export type GetBlogpostReturns = {
  "id": string;
  "title": string | null;
  "description": string | null;
  "content": string | null;
} | null;

export function getBlogpost(client: Executor, args: GetBlogpostArgs): Promise<GetBlogpostReturns> {
  return client.querySingle(`\
select Blogpost {
  id,
  title,
  description,
  content
}
filter .id = <uuid>$blogpost_id;`, args);

}


export type DeleteBlogpostArgs = {
  readonly "blogpost_id": string;
};

export type DeleteBlogpostReturns = {
  "id": string;
} | null;

export function deleteBlogpost(client: Executor, args: DeleteBlogpostArgs): Promise<DeleteBlogpostReturns> {
  return client.querySingle(`\
delete Blogpost
filter .id = <uuid>$blogpost_id;`, args);

}


export type InsertBlogpostArgs = {
  readonly "blogpost_title": string;
  readonly "blogpost_description": string;
  readonly "blogpost_content": string;
};

export type InsertBlogpostReturns = {
  "id": string;
};

export function insertBlogpost(client: Executor, args: InsertBlogpostArgs): Promise<InsertBlogpostReturns> {
  return client.queryRequiredSingle(`\
insert Blogpost {
  title := <str>$blogpost_title,
  description := <str>$blogpost_description,
  content := <str>$blogpost_content,
  author := global current_user
}`, args);

}



export type AllBlogpostsReturns = Array<{
  "id": string;
  "title": string | null;
  "description": string | null;
  "content": string | null;
}>;

export function allBlogposts(client: Executor): Promise<AllBlogpostsReturns> {
  return client.query(`\
select Blogpost {
  id,
  title,
  description,
  content,
}`);

}



export type AllProvidersReturns = Array<{
  "name": string;
  "id": string;
}>;

export function allProviders(client: Executor): Promise<AllProvidersReturns> {
  return client.query(`\
select ext::auth::OAuthProviderConfig {
  name,
  id
}`);

}
