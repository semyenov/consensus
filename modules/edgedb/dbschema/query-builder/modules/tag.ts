// GENERATED by @edgedb/generate v0.5.4

import * as $ from "../reflection";
import * as _ from "../imports";
import type * as _std from "./std";
import type * as _default from "./default";
import type * as _issue from "./issue";
import type * as _project from "./project";
export type $TaggableλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "tags": $.LinkDesc<$Tag, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Taggable = $.ObjectType<"tag::Taggable", $TaggableλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $Taggable = $.makeType<$Taggable>(_.spec, "020268a2-66b3-11ef-9bf5-7da44dfbdb1c", _.syntax.literal);

const Taggable: $.$expr_PathNode<$.TypeSet<$Taggable, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Taggable, $.Cardinality.Many), null);

export type $TagλShape = $.typeutil.flatten<_default.$BaseObjectλShape & {
  "<tags[is tag::Taggable]": $.LinkDesc<$Taggable, $.Cardinality.Many, {}, false, false,  false, false>;
  "<tags[is issue::Issue]": $.LinkDesc<_issue.$Issue, $.Cardinality.Many, {}, false, false,  false, false>;
  "<tags[is project::Project]": $.LinkDesc<_project.$Project, $.Cardinality.Many, {}, false, false,  false, false>;
  "<tags": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Tag = $.ObjectType<"tag::Tag", $TagλShape, null, [
  ..._default.$BaseObject['__exclusives__'],
]>;
const $Tag = $.makeType<$Tag>(_.spec, "0200920e-66b3-11ef-85c3-ff2edd064018", _.syntax.literal);

const Tag: $.$expr_PathNode<$.TypeSet<$Tag, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Tag, $.Cardinality.Many), null);



export { $Taggable, Taggable, $Tag, Tag };

type __defaultExports = {
  "Taggable": typeof Taggable;
  "Tag": typeof Tag
};
const __defaultExports: __defaultExports = {
  "Taggable": Taggable,
  "Tag": Tag
};
export default __defaultExports;
